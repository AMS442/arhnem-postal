# Generated by Django 4.1.7 on 2023-08-10 19:18

import django.db.models.deletion
import taggit_selectize.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="Archive",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "collection_id",
                    models.BigAutoField(
                        primary_key=True, serialize=False, verbose_name="Collection ID"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "image_id",
                    models.BigAutoField(
                        primary_key=True, serialize=False, verbose_name="Image ID"
                    ),
                ),
                ("image", models.ImageField(upload_to="images/")),
                ("image_caption", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                ("location_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("town_city", models.CharField(max_length=100)),
                (
                    "province_state",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("country", models.CharField(max_length=100)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Postmark",
            fields=[
                ("postmark_id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "date",
                    models.DateField(
                        blank=True,
                        help_text="Insert the date as YYYY-MM-DD or use the date picker. Leave blank if unknown.",
                        null=True,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="postcards.location",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("person_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(blank=True, max_length=50, null=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                ("house_number", models.CharField(max_length=50)),
                ("street", models.CharField(max_length=255)),
                ("date_of_birth", models.DateField()),
                ("date_of_death", models.DateField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="postcards.location",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Object",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "item_id",
                    models.CharField(
                        default="N/A", max_length=255, verbose_name="Item ID"
                    ),
                ),
                (
                    "return_to_sender",
                    models.BooleanField(
                        help_text="Check the box if the postcard was returned to sender."
                    ),
                ),
                (
                    "date_returned",
                    models.DateField(
                        blank=True,
                        help_text="Insert the date as YYYY-MM-DD or use the date picker. Leave blank if unknown.",
                        null=True,
                    ),
                ),
                (
                    "reason_for_return",
                    models.TextField(blank=True, max_length=255, null=True),
                ),
                (
                    "regime_censor",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("unknown", "Unknown")],
                        max_length=50,
                    ),
                ),
                (
                    "letter_type",
                    models.CharField(
                        choices=[
                            ("postcard", "Postcard"),
                            ("letter", "Letter"),
                            ("package", "Package"),
                            ("envelope", "Envelope"),
                        ],
                        max_length=50,
                    ),
                ),
                ("date_of_correspondence", models.DateField()),
                ("letter_enclosed", models.BooleanField()),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="files/",
                        verbose_name="Upload a file",
                    ),
                ),
                (
                    "translated",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("partial", "Partial")],
                        max_length=50,
                    ),
                ),
                (
                    "translation",
                    models.TextField(blank=True, max_length=600, null=True),
                ),
                (
                    "transcription",
                    models.TextField(blank=True, max_length=600, null=True),
                ),
                (
                    "other",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("red cross", "Red Cross"),
                            ("uberroller", "Uberroller"),
                            ("pow", "POW"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="These notes are not visible to the public.",
                        max_length=600,
                        null=True,
                        verbose_name="Internal notes",
                    ),
                ),
                (
                    "check_sensative_content",
                    models.BooleanField(
                        default=False,
                        help_text="Check this box if you think this postcard contains sensitive imagery or events.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="last updated"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date created"
                    ),
                ),
                (
                    "addressee_name",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addressee_name",
                        to="postcards.person",
                        verbose_name="addressee's name",
                    ),
                ),
                (
                    "collection",
                    models.ManyToManyField(
                        to="postcards.collection", verbose_name="collection"
                    ),
                ),
                (
                    "collection_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="postcards.archive",
                        verbose_name="Location in the Collection",
                    ),
                ),
                (
                    "postmark",
                    models.ManyToManyField(
                        to="postcards.postmark", verbose_name="postmark"
                    ),
                ),
                (
                    "related_images",
                    models.ManyToManyField(
                        blank=True, to="postcards.image", verbose_name="Related images"
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender_name",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sender_name",
                        to="postcards.person",
                        verbose_name="sender's name",
                    ),
                ),
                (
                    "tags",
                    taggit_selectize.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Keywords",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="image",
            name="postcard",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="images",
                to="postcards.object",
            ),
        ),
    ]
